#pragma once

#include "utility.isph"

typedef float<3> vec3;

inline vec3 make_vec3(float _x, float _y, float _z)
{
    vec3 v;
    v.x = _x;
    v.y = _y;
    v.z = _z;

    return v;
}

inline float length_squared(const vec3& v)
{
    return v.x * v.x + v.y * v.y + v.z * v.z;
}

inline float length(vec3& v)
{
    return sqrt(length_squared(v));
}

inline float dot(const vec3& u, const vec3& v)
{
    return u.x * v.x + u.y * v.y + u.z * v.z;
}

inline vec3 cross(const vec3& u, const vec3& v)
{
    return make_vec3(
        u.y * v.z - u.z * v.y,
        u.z * v.x - v.x * v.z,
        u.x * v.y - u.y * v.x
    );
}

inline vec3 reflect(const vec3& v, const vec3& n)
{
    return v - 2 * dot(v, n) * n;
}

inline vec3 unit_vec3(vec3& v)
{
    return v * rcp(length(v)); 
}

inline float linterp(float start, float end, float alpha)
{
    return (1.0 - alpha) * start + alpha * end; 
}

inline vec3 linterp(vec3& start, vec3& end, float alpha)
{
    return (1.0 - alpha) * start + alpha * end;
}

inline vec3 make_vec3_random()
{
    return make_vec3(random_float(), random_float(), random_float());
}

inline bool near_zero_vec3(vec3& v)
{
    float epsilon = 1e-8;

    return (abs(v.x) < epsilon, abs(v.y) < epsilon, abs(v.z) < epsilon);
}

inline vec3 make_vec3_random(float _min, float _max)
{
    return make_vec3(
        random_float(_min, _max),
        random_float(_min, _max),
        random_float(_min, _max)
    );
}

inline vec3 random_in_unit_sphere()
{
    while(true)
    {
        vec3 p = make_vec3_random(-1.0, 1.0);
        if(length_squared(p) < 1.0)
        {
            return p;
        }
    }
}

inline vec3 random_unit_vector()
{
    return unit_vec3(random_in_unit_sphere());
}

inline vec3 random_on_hemisphere(const vec3& normal)
{
    vec3 unit_vec = random_unit_vector();

    if(dot(unit_vec, normal) > 0.0)
    {
        return unit_vec;
    }
    else
    {
       return -unit_vec; 
    }
}