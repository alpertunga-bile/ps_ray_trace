#pragma once

typedef float<3> vec3;

inline vec3 make_vec3(float _x, float _y, float _z)
{
    vec3 v;
    v.x = _x;
    v.y = _y;
    v.z = _z;

    return v;
}

inline float length_squared(const vec3& v)
{
    return v.x * v.x + v.y * v.y + v.z * v.z;
}

inline float length(vec3& v)
{
    return sqrt(length_squared(v));
}

inline float dot(const vec3& u, const vec3& v)
{
    return u.x * v.x + u.y * v.y + u.z * v.z;
}

inline vec3 cross(const vec3& u, const vec3& v)
{
    return make_vec3(
        u.y * v.z - u.z * v.y,
        u.z * v.x - v.x * v.z,
        u.x * v.y - u.y * v.x
    );
}

inline vec3 unit_vec3(vec3& v)
{
    return v * rcp(length(v)); 
}

inline float linterp(float start, float end, float alpha)
{
    return (1.0 - alpha) * start + alpha * end; 
}

inline vec3 linterp(vec3& start, vec3& end, float alpha)
{
    return (1.0 - alpha) * start + alpha * end;
}
