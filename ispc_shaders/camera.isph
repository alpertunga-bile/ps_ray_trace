#pragma once

#include "ray.isph"

struct CameraVariables
{
    float focal_length;
    vec3 origin;
    float viewport_width;
    float viewport_height;
    int32 samples_per_pixel;
};

struct Camera
{
    float focal_length;
    vec3 origin;
    vec3 pixel_delta_u;
    vec3 pixel_delta_v;
    vec3 start_pixel_loc;
    float pixel_sample_scale;
};

inline Camera make_camera(
    uniform CameraVariables& vars, 
    uniform int32 image_width, 
    uniform int32 image_height
)
{
    Camera cam;

    cam.focal_length = vars.focal_length;
    cam.origin = vars.origin;

    vec3 viewport_u = make_vec3(vars.viewport_width, 0, 0);
    vec3 viewport_v = make_vec3(0, -1.0 * vars.viewport_height, 0);

    cam.pixel_delta_u = viewport_u / (float)(image_width);
    cam.pixel_delta_v = viewport_v / (float)(image_height);

    vec3 viewport_upper_left = cam.origin - make_vec3(0, 0, cam.focal_length) - viewport_u / 2.0 - viewport_v / 2.0;

    cam.start_pixel_loc = viewport_upper_left + 0.5 * (cam.pixel_delta_u + cam.pixel_delta_v);

    cam.pixel_sample_scale = 1.0 / vars.samples_per_pixel;

    return cam;
}

inline Ray get_ray(Camera& cam, float row, float col, RNGState& state)
{
    vec3 offset = make_vec3(
        frandom(&state) - 0.5,
        frandom(&state) - 0.5,
        0.0
    );

    vec3 pixel_center = cam.start_pixel_loc + ( (row + offset.x) * cam.pixel_delta_u) + ( (col + offset.y) * cam.pixel_delta_v);
    vec3 ray_direction = pixel_center - cam.origin;

    return make_ray(cam.origin, ray_direction);
}