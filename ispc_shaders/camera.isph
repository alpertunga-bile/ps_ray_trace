#pragma once

#include "vec3.isph"
#include "ray.isph"

struct Camera
{
    float focal_length;
    vec3 origin;
    vec3 pixel_delta_u;
    vec3 pixel_delta_v;
    vec3 start_pixel_loc;
};

inline Camera make_camera(float focal_length, vec3& origin, int32 image_width, int32 image_height, float viewport_width, float viewport_height)
{
    Camera cam;

    cam.focal_length = focal_length;
    cam.origin = origin;

    vec3 viewport_u = make_vec3(viewport_width, 0, 0);
    vec3 viewport_v = make_vec3(0, -viewport_height, 0);

    cam.pixel_delta_u = viewport_u / (float)(image_width);
    cam.pixel_delta_v = viewport_v / (float)(image_height);

    vec3 viewport_upper_left = origin - make_vec3(0, 0, focal_length) - viewport_u / 2.0 - viewport_v / 2.0;

    cam.start_pixel_loc = viewport_upper_left + 0.5 * (cam.pixel_delta_u + cam.pixel_delta_v);

    return cam;
}

inline Ray get_ray(Camera& cam, int32 row, int32 col)
{
    vec3 pixel_center = cam.start_pixel_loc + ((float)(row) * cam.pixel_delta_u) + ((float)(col) * cam.pixel_delta_v);
    vec3 ray_direction = pixel_center - cam.origin;

    return make_ray(pixel_center, ray_direction);
}